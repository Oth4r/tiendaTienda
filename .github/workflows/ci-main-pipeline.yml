# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: CI Pipeline Merge

on:
  push:
    branches: [ "master" ]

jobs:
  code_build:
    name: Code build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/
    steps:
    - name: Checkout source code
      uses: actions/checkout@v3
    - name: Building with ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - name: Install dependencies
      run: npm install --force
      
  unit_test:
    name: Unit testing
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x]
    steps:
    - name: Checkout source code
      uses: actions/checkout@v3
    - name: Testing with ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - name: Install dependencies
      run: npm install --force
    - name: Execute unit testing
      run: echo "Test"

  static_code_analysis:
    name: Static code analysis
    needs: [code_build, unit_test]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x]
    steps:
    - name: Checkout source code
      uses: actions/checkout@v3
    - name: Static code analysis with ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - name: Code analysis
      run: echo "Static code analysis"
      
  generate_artifact:
    name: Generate artifact
    needs: static_code_analysis
    runs-on: ubuntu-latest
    environment: development
    steps:
    - name: Checkout source code
      uses: actions/checkout@v3
    - name: Build application
      run: npm install --force
    - name: Log in to Docker Hub
      uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
      with:
        images: oth4r/tiendatienda
    - name: Build and push Docker image
      uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  deploy_development:
    name: Deploy to development
    needs: generate_artifact
    runs-on: ubuntu-latest
    environment: development
    steps:
      - name: Checkout source code 
        uses: actions/checkout@v3
      - name: Azure login
        id: login
        uses: azure/login@v1.4.3
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Set AKS context
        id: set-context
        uses: azure/aks-set-context@v3
        with:
          resource-group: 'RGEUK8S' 
          cluster-name: 'demok8s'
      - name: Setup kubectl
        id: install-kubectl
        uses: azure/setup-kubectl@v3
      - name: Deploy to AKS
        id: deploy-aks
        uses: Azure/k8s-deploy@v4
        with:
          namespace: 'grados'
          manifests: |
             k8s-manifest/deployment.yaml
             k8s-manifest/ingress-dev.yaml
             k8s-manifest/service.yaml
          images: 'Oth4r/tiendatienda:master'
          pull: false